// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7d\x6f\xdb\x36\xb7\xff\x5f\x9f\xe2\x4c\xc3\xc5\xd3\x00\x96\xe5\xa4\x5b\xb1\x38\x76\x2e\x5c\x47\x69\x84\xeb\xc8\x81\xac\xb4\x2b\x86\x21\xa0\x25\xda\x66\x2b\x91\x1a\x49\xc5\xf1\x32\x7f\xf7\x0b\x52\xf2\x8b\xfc\x92\x38\x45\x97\xf8\xd9\x92\xa0\x8d\x44\xf1\xbc\xff\x78\x78\x28\x52\xf7\xf7\x10\xe1\x01\xa1\x18\xcc\x9b\x1b\x14\x63\x2e\x13\x44\xd1\x10\x73\x13\xa6\xd3\x96\xba\xbf\xcc\xef\xef\xef\x01\xd3\x08\xa6\x53\x63\x2b\xc9\xb5\xdf\x51\x54\xf7\xf7\x50\x75\xee\x24\xe6\x14\xc5\xd7\x7e\x07\xa6\x53\xfb\x47\x5b\xf7\x13\xff\xcb\x71\x88\xc9\x2d\xe6\x4d\xd5\xc9\x2f\x6e\x72\x9a\x82\x7b\x99\xbd\xc8\xfa\x5f\x70\x28\x15\xdb\xdf\x14\x49\x4f\x22\x99\x09\xf8\x0b\x24\xbb\x4e\xd3\x19\x29\x19\x00\xfe\x63\xfe\xd0\x1c\x10\x4e\xe8\x50\xd1\xd4\x15\x8d\xb6\x42\x54\xcf\x75\x2b\xfc\x05\x31\xa6\xcb\x12\x7f\x07\xd5\xe9\x03\x67\x59\xda\x41\x7d\x1c\x8b\x6a\x8f\x71\x89\xa3\x2b\x44\xb8\xa8\x7e\x44\x71\x86\x95\xc0\x2f\x8c\x50\x30\x41\x71\x85\x5c\xe4\x50\xc2\x1b\xc5\xab\xda\x66\x49\xc2\x68\x4e\x7c\x50\xb4\x2d\xf1\x3b\x80\xe9\xf4\xcd\xfd\x3d\x8c\x89\x1c\x95\x3b\x57\x7d\x9c\xb0\x5b\x5c\x96\xee\xa1\x04\x8b\xc2\x8d\x9b\xa4\xcf\x15\x3f\x98\x5f\x6d\x89\x4d\x84\x45\xc8\x49\x2a\x09\xa3\xe6\x03\x3e\x96\xf8\x4e\xe6\x71\xbc\x89\x89\x90\x45\x57\x8e\xe8\x10\x43\x15\xa6\xd3\x5c\xaf\xba\xb1\x68\x5c\xf7\x93\xf2\x8a\xa5\x1d\xa9\xd4\x57\x77\x4d\x98\x1b\x50\x28\x96\x0b\x6f\x51\xca\x24\x52\x3a\x95\x58\x2e\x35\x7f\x1b\xdf\x1e\xcb\x78\x88\xeb\x79\x30\x31\xc5\x1c\x49\xc6\x73\xf8\x19\x1b\x1c\x55\xf2\x41\xcc\x86\xd5\x08\x0f\x50\x16\xcb\x6a\x82\x85\x40\x43\x5c\x78\x41\xe2\x24\x8d\x91\x2c\x63\xb1\x5a\xf0\x2c\x62\xb9\x45\xf5\x8d\xc1\x33\x56\xa0\x53\xc2\xe6\x01\xd4\x54\x97\xbc\x0d\xf2\x36\xed\xa3\x65\x2d\xd6\xa2\xb5\x82\xef\x65\x73\xb7\x48\xf3\xb1\x60\xf1\x2d\x8e\xca\xf2\x66\xad\xbb\x4b\x9c\x51\xac\xc9\xdc\x00\x33\x11\xa3\xf0\xeb\xdc\xc9\x92\xc8\xf8\x51\x17\x6f\x44\x75\x99\x4f\x26\x54\x96\x49\x36\xb1\x2a\xe7\xb2\x1d\xf9\x0d\x50\x1c\xf7\x51\xf8\x75\x8d\xdf\x46\xf5\x15\x53\xf8\x0b\x1e\xeb\x18\x13\xfa\x75\x67\x0d\x52\x8e\x95\xbf\xcd\xdd\x7a\x2f\xf1\x7f\xd0\x01\x3a\x33\xef\xa8\x01\x09\x19\xc5\x09\xfb\x42\x76\xd4\x41\xf5\xcf\x78\xbc\xab\xc6\x6b\xc6\x95\x60\x32\x22\x69\x38\x42\x72\x11\x10\xce\x92\x6f\x0f\xee\x2a\xb7\x1d\xc7\xf6\x16\xdd\x52\x25\x2d\xca\xe4\x64\xce\x6f\x3d\xc1\x3e\x0d\xcc\xeb\x1c\xc3\x98\x60\x2a\xbf\xdd\xe2\x6d\x1c\x17\x53\xf3\xb7\x41\x64\x9d\x2f\xa1\x42\x22\x1a\x62\xb1\x81\xef\x7a\xc6\xd8\xee\x55\x96\x8a\x21\xa6\x04\x7f\x7b\x90\x1e\x62\xb6\x1e\xa1\xbf\x23\x69\x5b\xdf\x27\x6b\x5b\xbb\xa7\x6d\xeb\xfb\xe5\xed\x25\xa9\xd6\x2e\x2e\x15\x7a\xa2\x7d\x3a\x9a\x4a\x51\xbf\x25\xa1\x64\x9c\xa5\x62\xc1\x56\x22\x89\x6f\xca\xc1\x7f\x8d\xd5\xd3\x62\xb5\xee\x55\x4c\x25\x91\x93\x9b\x88\x88\x34\x46\x93\x9b\x2d\x73\xe5\xe3\x03\x6b\x9d\x73\xc2\x28\x91\x4c\x39\xe4\x46\x32\x16\x3f\x31\x65\x2d\xf3\xc6\x09\x22\xf1\x02\x07\x8b\x8a\xff\xc9\x5a\x96\x39\x8d\x64\xa2\xd5\x32\x1a\x3f\x9c\x75\xdb\xc1\xe7\x2b\x07\x54\x13\x5c\x5d\xbf\xef\xb8\x6d\x30\x2d\xdb\xfe\xf4\xb6\x6d\xdb\x67\xc1\x19\xfc\x7a\x11\x5c\x76\xe0\xb0\x5a\x83\x80\x23\x2a\x88\x02\x1b\x8a\x6d\xdb\xf1\x4c\x30\x47\x52\xa6\x75\xdb\x1e\x8f\xc7\xd5\xf1\xdb\x2a\xe3\x43\x3b\xf0\xed\x3b\xc5\xeb\x50\x11\x17\x97\x96\x5c\xa2\xac\x46\x32\x32\x4f\x8d\xc6\x0f\x96\x65\xf4\xe4\x24\xc6\x80\x68\x04\x5a\x48\x84\x39\x51\x01\x55\x53\x1b\x28\xd6\xa2\x6e\xdb\x43\x22\x47\x59\xbf\x1a\xb2\xc4\x56\x36\x0c\x33\x6a\x6b\x76\x28\xcc\xf9\x59\xda\x34\x6b\xe6\x0e\x61\x18\x46\x30\xc2\x70\xe9\x06\xd0\x21\x21\xa6\x02\xc3\x9b\x4b\x37\x38\x30\x8c\x36\x4b\x27\x9c\x0c\x47\x12\xde\x84\x07\x70\x54\x3b\xfc\x09\x2e\x73\x8e\x86\x71\x85\x79\x42\x84\x20\x8c\x02\x11\x30\xc2\x1c\xf7\x27\x30\xe4\x88\x4a\x1c\x55\x60\xc0\x31\x06\x36\x80\x70\x84\xf8\x10\x57\x40\x32\x40\x74\x02\x29\xe6\x82\x51\x60\x7d\x89\x08\x55\xf8\x47\x10\xb2\x74\x62\xb0\x01\xc8\x11\x11\x20\xd8\x40\x8e\x11\xcf\x2d\x44\x42\xb0\x90\x20\x89\x23\x88\x58\x98\x25\x98\xe6\x03\x17\x06\x24\xc6\x02\xde\xc8\x11\x06\xb3\x57\x50\x98\x07\x5a\x48\x84\x51\x6c\x10\x0a\xea\xd9\xec\x91\x5e\x2c\xb1\x4c\x02\xc7\x42\x72\xa2\xbd\x50\x01\x42\xc3\x38\x8b\x94\x0e\xb3\xc7\x31\x49\x48\x21\x41\x91\x6b\xc3\x85\x21\x19\x64\x02\x57\xb4\x9e\x15\x48\x58\x44\x06\xea\x2f\xd6\x66\xa5\x59\x3f\x26\x62\x54\x81\x88\x28\xd6\xfd\x4c\xe2\x0a\x08\xd5\xa8\xfd\x58\x51\x76\xd8\x8c\x83\xc0\x71\x6c\x84\x2c\x25\x58\x80\xb6\x75\xa1\x9d\xee\xa3\x54\x4f\x95\x43\x65\xe1\x22\xa1\x5a\xc6\x23\x96\x94\x2d\x21\xc2\x18\x64\x9c\x12\x31\xc2\x9a\x26\x62\x20\x98\x96\xa8\xd0\xac\x5a\x54\xf7\x01\x8b\x63\x36\x56\xa6\x85\x8c\x46\xa4\x58\x1f\xe9\x20\xa3\xbe\x5a\x23\x86\xf3\xb8\x52\x26\x49\x98\xbb\x5b\x07\x20\x5d\x44\xb5\x78\x24\x46\x28\x8e\xa1\x8f\x0b\x87\xe1\x08\x08\x05\xb4\x64\x0e\x57\xe2\xd5\xfc\x2d\x09\x8a\x21\x65\x5c\xcb\x5b\x35\xb3\x6a\x18\xc1\x85\x03\xbd\xee\x79\xf0\xa9\xe5\x3b\xe0\xf6\xe0\xca\xef\x7e\x74\xcf\x9c\x33\x30\x5b\x3d\x70\x7b\x66\x05\x3e\xb9\xc1\x45\xf7\x3a\x80\x4f\x2d\xdf\x6f\x79\xc1\x67\xe8\x9e\x43\xcb\xfb\x0c\xff\xe7\x7a\x67\x15\x70\x7e\xbd\xf2\x9d\x5e\x0f\xba\xbe\xe1\x5e\x5e\x75\x5c\xe7\xac\x02\xae\xd7\xee\x5c\x9f\xb9\xde\x07\x78\x7f\x1d\x80\xd7\x0d\xa0\xe3\x5e\xba\x81\x73\x06\x41\x17\x94\xc0\x82\x95\xeb\xf4\x14\xb3\x4b\xc7\x6f\x5f\xb4\xbc\xa0\xf5\xde\xed\xb8\xc1\xe7\x8a\x71\xee\x06\x9e\xe2\x79\xde\xf5\xa1\x05\x57\x2d\x3f\x70\xdb\xd7\x9d\x96\x0f\x57\xd7\xfe\x55\xb7\xe7\x40\xcb\x3b\x03\xaf\xeb\xb9\xde\xb9\xef\x7a\x1f\x9c\x4b\xc7\x0b\xaa\xe0\x7a\xe0\x75\xc1\xf9\xe8\x78\x01\xf4\x2e\x5a\x9d\x8e\x12\x65\xb4\xae\x83\x8b\xae\xaf\xf4\x83\x76\xf7\xea\xb3\xef\x7e\xb8\x08\xe0\xa2\xdb\x39\x73\xfc\x1e\xbc\x77\xa0\xe3\xb6\xde\x77\x9c\x5c\x94\xf7\x19\xda\x9d\x96\x7b\x59\x81\xb3\xd6\x65\xeb\x83\xa3\xa9\xba\xc1\x85\xe3\x1b\xaa\x5b\xae\x1d\x7c\xba\x70\x54\x93\x92\xd7\xf2\xa0\xd5\x0e\xdc\xae\xa7\xcc\x68\x77\xbd\xc0\x6f\xb5\x83\x0a\x04\x5d\x3f\x98\x93\x7e\x72\x7b\x4e\x05\x5a\xbe\xdb\x53\x0e\x39\xf7\xbb\x97\x15\x43\xb9\xb3\x7b\xae\xba\xb8\x9e\xa2\xf3\x9c\x9c\x8b\x72\x35\x94\x22\xd2\xf5\xf5\xfd\x75\xcf\x99\x33\x84\x33\xa7\xd5\x71\xbd\x0f\x3d\x45\xac\x4c\x9c\x75\xae\x1a\x96\x75\x6a\x34\x74\x0a\xbc\x4b\x62\x2a\x9a\x1b\x12\xdb\xe1\xf1\xf1\x71\x9e\xcf\xcc\xdd\x3a\x09\x95\xdc\x9a\xe6\x80\x51\x69\x0d\x50\x42\xe2\x49\x1d\xfe\x73\x81\xe3\x5b\x2c\x49\x88\xc0\xc3\x19\xfe\x4f\x05\xe6\x0d\x15\x68\x71\x82\xe2\x0a\x08\x44\x85\x25\x30\x27\x83\x13\xe8\xb3\x3b\x4b\x90\x3f\xd5\x5c\x0c\x7d\xc6\x23\xcc\xad\x3e\xbb\x3b\x01\xcd\x54\x90\x3f\x71\x1d\x0e\x7f\x4a\xef\x4e\x20\x41\x7c\x48\x68\x1d\x6a\x27\x2a\xb7\x8e\x30\x8a\x5e\x52\x7e\x82\x25\x02\x35\xa3\x36\xcd\x5b\x82\xc7\x6a\x14\x99\x6a\xf4\x4a\x4c\x65\xd3\x1c\x93\x48\x8e\x9a\x11\xbe\x25\x21\xb6\xf4\xcd\xcb\x39\x0b\xec\x99\xba\x2a\x98\x16\xfe\x23\x23\xb7\x4d\xb3\x9d\xab\x6a\x05\x93\x14\x2f\x29\xae\x4a\x11\x5b\x05\xf7\x44\xcf\x04\x02\xcb\xe6\x75\x70\x6e\xfd\xf2\xc2\xea\xeb\xa5\xee\xcb\x85\xfb\xa1\x5a\xa4\x61\x6b\xe5\x4e\x0d\xa3\x61\x2b\x50\xaa\x8b\x3e\x8b\x26\x40\x24\x4e\x44\xc8\x52\xdc\x34\x4d\x7d\x23\x27\xea\xba\x18\x51\x22\x1c\xe1\x04\xe9\x11\xe5\xa8\xd9\xfd\x72\x56\xfb\x3e\xab\x91\xd6\x18\xf7\xbf\x12\x69\xe5\x0f\x12\xc6\xe4\x48\x13\xe5\x73\x03\x41\x02\x47\x8b\x4e\x0a\x1b\x9a\xda\x42\xd1\x97\x4c\xc8\x3a\x50\x46\xf1\x09\x8c\xb0\x9a\x99\xea\x70\x58\xab\xfd\xcf\x09\xc4\x84\x62\x6b\xde\x54\x7d\x87\x93\x13\xd0\x23\x20\xef\x00\x3f\x90\x44\x0d\x16\x44\xe5\x09\xf4\x51\xf8\x75\xc8\x59\x46\x23\x2b\x64\x31\xe3\x75\xf8\x71\xf0\x4e\xfd\x2e\xbb\x1f\x52\x14\x45\x5a\x2b\x85\x86\xfe\x50\xf7\x6c\x9a\x45\x4f\x53\xf9\x5b\xa2\xfe\x73\xc3\x63\xc9\xa4\x1d\xed\xd8\xa8\x3b\x40\x43\xf2\x17\xcc\x63\x00\x4a\x83\x67\xce\xa4\xb7\x98\x2b\x26\xb1\x85\x62\x32\xa4\x75\x90\x2c\x2d\x3b\xea\x56\x3f\x68\x9a\x92\xa5\xe6\x69\xc3\x96\xd1\x42\xd1\x3c\xb3\x9a\xef\x6a\xb5\x67\x1e\x2a\x1b\x95\x2e\x96\x56\x75\xe8\xc7\x2c\xfc\x5a\xc2\x76\x82\xee\xac\x02\x24\xef\x6a\xb5\xf4\xae\xf4\x30\x8c\x31\xe2\x4a\xa0\x1c\x95\xda\xb7\x0d\x94\xb9\x73\x00\x65\x92\xad\x0c\x89\x92\xb7\xb4\xa3\x00\x1a\x11\xb9\x7d\x6e\x58\x95\xed\x5d\x75\xce\xc3\x46\xcc\xf4\x56\x41\xd6\x83\xb9\x88\xb3\xf2\x84\x09\x21\x8e\xe3\xa2\x77\xd3\xac\xe5\xf7\x22\x45\xe1\xec\xfe\x59\x0d\x2d\x1e\x72\x14\x91\x4c\xd4\xe1\xad\x6e\xdb\x90\x00\x06\x83\x52\x16\xcb\xc9\xea\x70\x98\xde\x81\x60\x31\x89\xe0\x47\x7c\xac\x7e\xcb\x89\x61\x30\x58\xf2\xc5\x3e\x64\x87\x85\x26\xcf\x97\x25\xde\x6d\x1d\x70\x25\xef\x6a\x92\x71\x31\xd5\xfc\x5c\xab\x9d\x80\x9e\xa2\x8a\xfe\x21\xa6\x12\xf3\x4d\xf1\xd2\xff\x6a\x3a\x28\xeb\x71\x73\xde\xfd\x7c\x74\xd4\xde\x3c\x01\x1d\x29\x5c\x9b\x50\x8c\xb7\x5c\xc0\x72\xf4\x72\xda\xcd\x23\x72\xf6\xb3\xd8\x94\x9c\xef\x46\x82\x7e\x59\xb2\xf1\x5d\xd2\x01\x1c\xc2\x74\x2a\xe6\x2f\x3c\x60\xc0\x38\x2c\x36\xce\xb6\x6c\x5c\xc2\x74\xba\x22\x15\x96\xb7\xd1\x9a\xa5\x4d\xb4\xb5\x6e\xc5\xab\x95\x52\xf0\xe7\x39\x78\x7e\xcf\x5f\x61\xba\xcb\x64\xb6\x00\xcf\x61\x0e\x9e\x87\xb0\xb1\xf7\xb9\x6f\xab\xdb\xf7\x0b\x04\xfb\x0e\x85\x1a\xd4\x66\xb9\xe4\x21\x38\x14\x66\x20\x18\x71\x3c\x68\x9a\xbb\xbc\x71\x7f\x66\x3c\xcc\x92\xe6\xf9\xf9\x79\x91\x7c\x23\x1c\x32\xae\xdf\xc9\xcd\x96\x07\xa5\x05\xc1\x91\x5a\x0e\x94\xf2\x76\x9f\xc5\xd1\xe6\xc4\x1d\x66\x5c\x28\xee\x29\x23\x79\xc3\xbc\xa0\x20\x54\x33\x2d\xea\x8a\x95\x04\xff\xb3\x52\x4c\xf3\xd3\x2f\x51\x07\x8c\x27\x75\x08\x51\x4a\x24\x8a\xc9\x9f\x78\x63\xd2\x7f\xfb\xd3\x2f\x38\x42\x1b\xe6\xeb\xb5\x1e\x45\xb3\xf6\x72\x3d\x9f\xc8\xe7\x8d\xf3\xea\x2d\xbd\x2b\xc2\x7b\xfa\x91\xe0\x31\x10\x0a\x8f\xbe\x1d\x6f\xd8\x68\x23\x86\x57\x12\xef\xe6\xf4\x9b\xff\xec\x70\xba\xe0\x75\xc8\x3e\xcf\x90\x15\x92\x33\x3a\x7c\x39\xd7\xfe\xb6\xfd\xe8\xd3\xef\xc5\xce\x57\xc3\xce\x95\xfc\x0e\xa8\xdb\x50\x30\x14\x4f\x66\xe7\x7b\x56\xb7\xd0\x5e\x71\xf8\xef\xc0\x61\x5e\x9a\xce\xa1\xd6\xe8\xbf\x5c\x98\xc1\xde\xec\xa3\x47\x0e\xb6\x6d\x3f\x7d\xf6\xc2\xc6\x6c\x1f\x77\xb0\x61\x2e\x58\x6c\xa2\xe7\x33\xc1\x8b\x23\x63\x49\xa3\x7d\x81\xc7\xa3\x1e\x7d\xf4\xb4\xe2\x7f\x29\x58\x96\x2b\xcc\xd5\xe3\x93\x2f\x54\x50\xce\xca\xad\xb5\x9a\x32\xa3\x11\xe6\xaa\xfa\x2b\xc3\x29\x3f\x00\xaa\x8a\xa8\xfd\xcb\x31\xdf\x36\x9b\xee\x58\xde\xad\x1c\xe7\x7c\x3c\x13\xbc\x56\x85\x2f\x36\x1b\xef\x1d\x32\x01\x1a\xa3\x3d\xd4\x69\xef\xfc\xf4\x94\x11\xfc\x50\x45\xfc\x3a\xb0\xfe\x99\x65\xee\xf2\x72\x6b\x7e\x66\x6f\xb1\xe0\x9a\x35\xbd\xc0\x92\x6b\xf9\x04\xe1\x2b\x1a\xff\x1d\x68\x7c\x5d\x74\xbd\x2e\xba\x5e\x17\x5d\xfb\x0e\x96\xd7\x45\xd7\xde\x94\x6c\xdb\x02\xd5\xb0\xf5\x7e\xdc\xe9\x13\xb6\x42\xe7\x24\x8b\x96\x67\x3f\x89\x51\x3a\x9a\xb4\x74\xd2\x64\x11\xe8\xe3\xe3\xe3\x87\x36\xb8\xcb\x3b\xbb\xeb\x5b\x92\xfb\x51\x34\xec\x53\xf9\xf2\x9c\xa5\xcb\xd1\xd6\xd2\x65\xe3\x26\xda\x63\x21\x5f\xaa\x6d\x56\xce\x35\x94\x4f\x61\x2d\xa7\xab\xf2\x07\xde\xcf\x07\x88\xa3\xe5\x6c\xa5\x2d\xda\x39\x55\x61\x2a\xa1\x3f\xd9\x6d\x1f\x6e\x3d\x77\xac\x9d\x77\x58\xcd\x0c\x0d\x3b\x22\xb7\xa7\xf9\xff\x46\x39\x4d\xec\x5b\x59\xbb\xe5\x78\x5d\x6e\xe2\x22\x7f\x35\xec\x3e\x8b\x26\xaa\x65\x24\x93\xf8\xd4\xd8\xf2\x69\x6f\x9a\x89\x11\xbb\xc5\xfc\x3b\x7c\xdd\xbb\xc6\xea\xef\xff\x1e\xec\x9f\xf4\xc1\xf5\x43\x9e\x5c\x7c\xa2\xfb\x84\x6f\xf6\xfe\x3f\x00\x00\xff\xff\x5d\x6e\x86\x8e\x1e\x42\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16926, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
